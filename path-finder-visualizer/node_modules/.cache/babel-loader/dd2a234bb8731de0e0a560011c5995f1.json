{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nexport default function PathfindingVisualizer() {\n  _s();\n\n  const [nodes, setNodes] = useState([]);\n\n  const addWall = () => {\n    alert('hi');\n  };\n\n  useEffect(() => {\n    let nodes = [];\n\n    for (let row = 0; row < 15; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        let currentNode = {\n          row,\n          col,\n          isStart: row === 0 && col === 0,\n          isFinish: row === 14 && col === 49,\n          isWall: false,\n          isVisited: false,\n          distance: row === 0 && col === 0 ? 0 : Infinity\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    setNodes(nodes);\n    console.log(nodes);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: row.map((node, nodeIndex) => {\n          const {\n            isStart,\n            isFinish,\n            isWall\n          } = node;\n          return /*#__PURE__*/_jsxDEV(Node, {\n            isStart: isStart,\n            isFinish: isFinish,\n            isWall: isWall,\n            addWall: () => addWall()\n          }, nodeIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PathfindingVisualizer, \"PbTFKmE3ANQd50N7lqnMXthrMF4=\");\n\n_c = PathfindingVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js"],"names":["React","Component","useEffect","useState","Node","PathfindingVisualizer","nodes","setNodes","addWall","alert","row","currentRow","col","currentNode","isStart","isFinish","isWall","isVisited","distance","Infinity","push","console","log","map","rowIndex","node","nodeIndex"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,6BAAP;AACA,eAAe,SAASC,qBAAT,GAAgC;AAAA;;AAE3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMK,OAAO,GAAG,MAAM;AAClBC,IAAAA,KAAK,CAAC,IAAD,CAAL;AACH,GAFD;;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AAC/B,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AAC/B,YAAIC,WAAW,GAAG;AACdH,UAAAA,GADc;AAEdE,UAAAA,GAFc;AAGdE,UAAAA,OAAO,EAAEJ,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK,CAHhB;AAIdG,UAAAA,QAAQ,EAAEL,GAAG,KAAK,EAAR,IAAcE,GAAG,KAAK,EAJlB;AAKdI,UAAAA,MAAM,EAAE,KALM;AAMdC,UAAAA,SAAS,EAAE,KANG;AAOdC,UAAAA,QAAQ,EAAGR,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK,CAAtB,GAA2B,CAA3B,GAA+BO;AAP3B,SAAlB;AASAR,QAAAA,UAAU,CAACS,IAAX,CAAgBP,WAAhB;AACH;;AACDP,MAAAA,KAAK,CAACc,IAAN,CAAWT,UAAX;AACH;;AACDJ,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACH,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACKA,KAAK,CAACiB,GAAN,CAAU,CAACb,GAAD,EAAMc,QAAN,KAAmB;AAC1B,0BACI;AAAA,kBACKd,GAAG,CAACa,GAAJ,CAAQ,CAACE,IAAD,EAAOC,SAAP,KAAqB;AAC1B,gBAAM;AAACZ,YAAAA,OAAD;AAAUC,YAAAA,QAAV;AAAoBC,YAAAA;AAApB,cAA8BS,IAApC;AACA,8BACI,QAAC,IAAD;AAEI,YAAA,OAAO,EAAEX,OAFb;AAGI,YAAA,QAAQ,EAAEC,QAHd;AAII,YAAA,MAAM,EAAEC,MAJZ;AAKI,YAAA,OAAO,EAAE,MAAMR,OAAO;AAL1B,aACSkB,SADT;AAAA;AAAA;AAAA;AAAA,kBADJ;AASH,SAXA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAgBH,KAjBA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;;GApDuBrB,qB;;KAAAA,qB","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nexport default function PathfindingVisualizer(){\n\n    const [nodes, setNodes] = useState([]);\n\n    const addWall = () => {\n        alert('hi')\n    }\n\n    useEffect(() => {\n        let nodes = [];\n        for( let row = 0; row < 15; row++) {\n            const currentRow = [];\n            for( let col = 0; col < 50; col++) {\n                let currentNode = {\n                    row,\n                    col,\n                    isStart: row === 0 && col === 0,\n                    isFinish: row === 14 && col === 49,\n                    isWall: false,\n                    isVisited: false,\n                    distance: (row === 0 && col === 0) ? 0 : Infinity\n                }\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        setNodes(nodes);\n        console.log(nodes);\n    }, []);\n\n    return(\n        <div className=\"grid\">\n            {nodes.map((row, rowIndex) => {\n                return(\n                    <div>\n                        {row.map((node, nodeIndex) => {\n                            const {isStart, isFinish, isWall} = node;\n                            return(\n                                <Node\n                                    key={nodeIndex}\n                                    isStart={isStart}\n                                    isFinish={isFinish}\n                                    isWall={isWall}\n                                    addWall={() => addWall()}\n                                ></Node>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}