{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport NavigationBar from './NavigationBar';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { dijkstra, getNodesInShortestPathOrder } from '../Algorithms/Dijkstra';\nimport { bfs } from '../Algorithms/Bfs';\nimport HelpDialog from './HelpDialog';\nimport AlgorithmSelector from './AlgorithmSelector';\nconst useStyles = makeStyles({\n  button1: {\n    margin: '20px',\n    backgroundColor: 'red',\n    fontWeight: 'bold'\n  },\n  button2: {\n    margin: '20px',\n    backgroundColor: 'green',\n    fontWeight: 'bold'\n  },\n  button3: {\n    margin: '20px',\n    backgroundColor: 'purple',\n    fontWeight: 'bold'\n  },\n  button4: {\n    margin: '20px',\n    backgroundColor: 'yellow',\n    fontWeight: 'bold'\n  },\n  button5: {\n    margin: '20px',\n    backgroundColor: 'brown',\n    fontWeight: 'bold'\n  }\n});\nexport default function PathfindingVisualizer() {\n  _s();\n\n  const classes = useStyles(); // board characteristics\n\n  const [BOARD_WIDTH, setBoardWidth] = useState(55);\n  const [BOARD_LENGTH, setBoardLength] = useState(23);\n  const [INITIAL_POS_x, setInitialX] = useState(7);\n  const [INITIAL_POS_y, setInitialY] = useState(8);\n  const [FINAL_POS_x, setFinalX] = useState(9);\n  const [FINAL_POS_y, setFinalY] = useState(36);\n  const [algorithm, setAlgorithm] = useState('Dijkstra'); //grid is a 2D array [][]\n\n  const [grid, setGrid] = useState([]); //variable to control if mouse is pressed (add walls or move initial points)\n\n  const [mouseIsPressed, setMouseIsPressed] = useState(false); //when mouse scrolls over\n\n  const handleMouseEnter = (row, col) => {\n    if (!mouseIsPressed) return;\n    const newGrid = addOrDeleteWall(grid, row, col);\n    setGrid(newGrid);\n  }; //when mouse presses a \"node\" aka <div>\n\n\n  const handleMouseDown = (row, col) => {\n    setMouseIsPressed(true);\n    const newGrid = addOrDeleteWall(grid, row, col);\n    setGrid(newGrid);\n  }; //when mouse is unpressed\n\n\n  const handleMouseUp = (row, col) => {\n    setMouseIsPressed(false);\n  }; //visual animation for computing Dijkstra's algorithm\n\n\n  const animatedVisualization = (visitedNodes, shortestPath) => {\n    for (let i = 1; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          showPath(shortestPath);\n        }, i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n\n        if (node.col !== FINAL_POS_y || node.row !== FINAL_POS_x) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-is-visited';\n        }\n      }, i);\n    }\n  }; //compute actual dijkstra algorithm\n\n\n  const computeDijkstra = () => {\n    const visitedNodes = dijkstra(grid, grid[INITIAL_POS_x][INITIAL_POS_y], grid[FINAL_POS_x][FINAL_POS_y]);\n    const shortestPath = getNodesInShortestPathOrder(grid[FINAL_POS_x][FINAL_POS_y]);\n    animatedVisualization(visitedNodes, shortestPath);\n  };\n\n  const computeBfs = () => {\n    const visitedNodes = bfs(grid, grid[INITIAL_POS_x][INITIAL_POS_y], grid[FINAL_POS_x][FINAL_POS_y]);\n    const shortestPath = getNodesInShortestPathOrder(grid[FINAL_POS_x][FINAL_POS_y]);\n    animatedVisualization(visitedNodes, shortestPath);\n  };\n\n  const visualizeAlgorithm = () => {\n    if (algorithm === 'Dijkstra') {\n      computeDijkstra();\n    } else if (algorithm === 'BFS (Breadth-first search)') {\n      computeBfs();\n    } else {\n      alert('Not implemented yet');\n    }\n  };\n\n  const changeAlgorithm = algorithm => {\n    setAlgorithm(algorithm);\n  }; //show shortest path\n\n\n  const showPath = nodes => {\n    if (nodes.length === 1) {\n      alert('No path');\n      return;\n    }\n\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodeIsInitialOrLast(nodes[i].row, nodes[i].col)) continue;\n      setTimeout(function () {\n        document.getElementById(`node-${nodes[i].row}-${nodes[i].col}`).className = 'node node-is-path';\n      }, 10);\n    }\n  }; //Helper method to detect if node is initial or last\n\n\n  const nodeIsInitialOrLast = (row, col) => {\n    if (row === INITIAL_POS_x && col === INITIAL_POS_y || row === FINAL_POS_x && col === FINAL_POS_y) {\n      return true;\n    }\n\n    return false;\n  }; //clear grid (board)\n\n\n  const clearGrid = () => {\n    setGrid(createEmptyGrid());\n\n    for (let row = 0; row < BOARD_LENGTH; row++) {\n      for (let col = 0; col < BOARD_WIDTH; col++) {\n        if (nodeIsInitialOrLast(row, col)) continue;\n        document.getElementById(`node-${row}-${col}`).className = 'node';\n      }\n    }\n  }; //initialize grid\n\n\n  const createEmptyGrid = () => {\n    let grid = [];\n\n    for (let row = 0; row < BOARD_LENGTH; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < BOARD_WIDTH; col++) {\n        let currentNode = {\n          row,\n          col,\n          isStart: row === INITIAL_POS_x && col === INITIAL_POS_y,\n          isFinish: row === FINAL_POS_x && col === FINAL_POS_y,\n          isWall: false,\n          isVisited: false,\n          distance: row === INITIAL_POS_x && col === INITIAL_POS_y ? 0 : Infinity,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }; //method to add or delete walls when clicking the grid\n\n\n  const addOrDeleteWall = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = { ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  useEffect(() => {\n    setGrid(createEmptyGrid());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavigationBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(AlgorithmSelector, {\n        changeAlgorithm: changeAlgorithm,\n        currentAlgorithm: algorithm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.button2,\n        onClick: () => visualizeAlgorithm(),\n        children: \"VISUALIZE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.button4,\n        onClick: () => clearGrid(),\n        children: \"CLEAR GRID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(HelpDialog, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIndex) => {\n            const {\n              row,\n              col,\n              isStart,\n              isFinish,\n              isWall\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              row: row,\n              col: col,\n              isStart: isStart,\n              isFinish: isFinish,\n              isWall: isWall,\n              onMouseDown: (row, col) => handleMouseDown(row, col),\n              onMouseEnter: (row, col) => handleMouseEnter(row, col),\n              onMouseUp: (row, col) => handleMouseUp(row, col)\n            }, nodeIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PathfindingVisualizer, \"5fy8ZGwCdHtJwOoG/rj33mBRmto=\", false, function () {\n  return [useStyles];\n});\n\n_c = PathfindingVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js"],"names":["React","useEffect","useState","Node","NavigationBar","Button","makeStyles","dijkstra","getNodesInShortestPathOrder","bfs","HelpDialog","AlgorithmSelector","useStyles","button1","margin","backgroundColor","fontWeight","button2","button3","button4","button5","PathfindingVisualizer","classes","BOARD_WIDTH","setBoardWidth","BOARD_LENGTH","setBoardLength","INITIAL_POS_x","setInitialX","INITIAL_POS_y","setInitialY","FINAL_POS_x","setFinalX","FINAL_POS_y","setFinalY","algorithm","setAlgorithm","grid","setGrid","mouseIsPressed","setMouseIsPressed","handleMouseEnter","row","col","newGrid","addOrDeleteWall","handleMouseDown","handleMouseUp","animatedVisualization","visitedNodes","shortestPath","i","length","setTimeout","showPath","node","document","getElementById","className","computeDijkstra","computeBfs","visualizeAlgorithm","alert","changeAlgorithm","nodes","nodeIsInitialOrLast","clearGrid","createEmptyGrid","currentRow","currentNode","isStart","isFinish","isWall","isVisited","distance","Infinity","previousNode","push","slice","newNode","map","rowIndex","nodeIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport NavigationBar from './NavigationBar';\nimport {\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\nimport {bfs} from '../Algorithms/Bfs';\nimport HelpDialog from './HelpDialog';\nimport AlgorithmSelector from './AlgorithmSelector';\n\nconst useStyles = makeStyles({\n    button1: {\n        margin: '20px',\n        backgroundColor: 'red',\n        fontWeight: 'bold'\n    },\n    button2: {\n        margin: '20px',\n        backgroundColor: 'green',\n        fontWeight: 'bold'\n    },\n    button3: {\n        margin: '20px',\n        backgroundColor: 'purple',\n        fontWeight: 'bold'\n    },\n    button4: {\n        margin: '20px',\n        backgroundColor: 'yellow',\n        fontWeight: 'bold'\n    },\n    button5: {\n        margin: '20px',\n        backgroundColor: 'brown',\n        fontWeight: 'bold'\n    },\n})\n\nexport default function PathfindingVisualizer(){\n\n    const classes = useStyles();\n\n    // board characteristics\n    const [BOARD_WIDTH, setBoardWidth] = useState(55);\n    const [BOARD_LENGTH, setBoardLength] = useState(23);\n    const [INITIAL_POS_x, setInitialX] = useState(7);\n    const [INITIAL_POS_y, setInitialY] = useState(8);\n    const [FINAL_POS_x, setFinalX] = useState(9);\n    const [FINAL_POS_y, setFinalY] = useState(36);\n\n    const [algorithm, setAlgorithm] = useState('Dijkstra');\n\n    //grid is a 2D array [][]\n    const [grid, setGrid] = useState([]);\n    //variable to control if mouse is pressed (add walls or move initial points)\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n    //when mouse scrolls over\n    const handleMouseEnter = (row, col) => {\n        if(!mouseIsPressed) return;\n        const newGrid = addOrDeleteWall(grid, row, col);\n        setGrid(newGrid);             \n    }\n    //when mouse presses a \"node\" aka <div>\n    const handleMouseDown = (row, col) => {\n        setMouseIsPressed(true);\n        const newGrid = addOrDeleteWall(grid, row, col);\n        setGrid(newGrid);            \n    }\n    //when mouse is unpressed\n    const handleMouseUp = (row, col) => {\n        setMouseIsPressed(false);\n    }\n    //visual animation for computing Dijkstra's algorithm\n    const animatedVisualization = (visitedNodes, shortestPath) => {\n        for(let i = 1; i <= visitedNodes.length; i++) {\n            if ( i === visitedNodes.length) {\n                setTimeout(() => {\n                    showPath(shortestPath);\n                }, i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodes[i];\n                if(node.col !== FINAL_POS_y || node.row !== FINAL_POS_x) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-is-visited';   \n                }\n            }, i)\n        }\n    }\n    //compute actual dijkstra algorithm\n    const computeDijkstra = () => {\n        const visitedNodes = dijkstra(grid, grid[INITIAL_POS_x][INITIAL_POS_y], grid[FINAL_POS_x][FINAL_POS_y]);\n        const shortestPath = getNodesInShortestPathOrder(grid[FINAL_POS_x][FINAL_POS_y]);\n        animatedVisualization(visitedNodes, shortestPath);\n    }\n\n    const computeBfs = () => {\n        const visitedNodes = bfs(grid, grid[INITIAL_POS_x][INITIAL_POS_y], grid[FINAL_POS_x][FINAL_POS_y]);\n        const shortestPath = getNodesInShortestPathOrder(grid[FINAL_POS_x][FINAL_POS_y]);\n        animatedVisualization(visitedNodes, shortestPath);\n    }\n\n    const visualizeAlgorithm = () => {\n        if(algorithm === 'Dijkstra') {\n            computeDijkstra();\n        } else if(algorithm === 'BFS (Breadth-first search)') {\n            computeBfs();\n        } else {\n            alert('Not implemented yet');\n        }\n    }\n\n    const changeAlgorithm = (algorithm) => {\n        setAlgorithm(algorithm);\n    }\n\n    //show shortest path\n    const showPath = (nodes) => {\n        if(nodes.length === 1) {\n            alert('No path')\n            return;\n        }\n        for(let i = 0; i < nodes.length; i++) {\n            if( nodeIsInitialOrLast(nodes[i].row, nodes[i].col) ) continue;\n            setTimeout(function() {\n                document.getElementById(`node-${nodes[i].row}-${nodes[i].col}`).className = 'node node-is-path';\n            }, 10);\n        }\n    }\n    //Helper method to detect if node is initial or last\n    const nodeIsInitialOrLast = (row, col) => {\n        if( (row === INITIAL_POS_x && col === INITIAL_POS_y) \n        || (row === FINAL_POS_x && col === FINAL_POS_y)) {\n            return true;\n        }\n        return false;\n    }\n    //clear grid (board)\n    const clearGrid = () => {\n        setGrid(createEmptyGrid());\n        for( let row = 0; row < BOARD_LENGTH; row++) {\n            for( let col = 0; col < BOARD_WIDTH; col++) {\n                if(nodeIsInitialOrLast(row, col)) continue;\n                document.getElementById(`node-${row}-${col}`).className = 'node'; \n            }\n        }\n    }\n    //initialize grid\n    const createEmptyGrid = () => {\n        let grid = [];\n        for( let row = 0; row < BOARD_LENGTH; row++) {\n            const currentRow = [];\n            for( let col = 0; col < BOARD_WIDTH; col++) {\n                let currentNode = {\n                    row,\n                    col,\n                    isStart: row === INITIAL_POS_x && col === INITIAL_POS_y,\n                    isFinish: row === FINAL_POS_x && col === FINAL_POS_y,\n                    isWall: false,\n                    isVisited: false,\n                    distance: (row === INITIAL_POS_x && col === INITIAL_POS_y) ? 0 : Infinity,\n                    previousNode: null\n                }\n                currentRow.push(currentNode);\n            }\n            grid.push(currentRow);\n        }\n        return grid;       \n    }\n    //method to add or delete walls when clicking the grid\n    const addOrDeleteWall = (grid, row, col) => {\n        const newGrid = grid.slice();\n        const node = newGrid[row][col];\n        const newNode = {\n            ...node,\n            isWall: !node.isWall,\n        };\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n    \n\n    useEffect(() => {\n        setGrid(createEmptyGrid());\n    }, []);\n\n    return(\n        <>\n        <NavigationBar></NavigationBar>\n        <div className=\"buttons-container\">\n            <AlgorithmSelector\n                changeAlgorithm={changeAlgorithm}\n                currentAlgorithm={algorithm}\n            ></AlgorithmSelector>\n            <Button variant=\"contained\" className={classes.button2} onClick={() => visualizeAlgorithm()}>VISUALIZE</Button>\n            <Button variant=\"contained\" className={classes.button4} onClick={() => clearGrid()}>CLEAR GRID</Button>\n            <HelpDialog></HelpDialog>\n        </div>\n        <div className=\"grid\">\n            {grid.map((row, rowIndex) => {\n                return(\n                    <div>\n                        {row.map((node, nodeIndex) => {\n                            const {row, col, isStart, isFinish, isWall} = node;\n                            return(\n                                <Node\n                                    row={row}\n                                    col={col}\n                                    key={nodeIndex}\n                                    isStart={isStart}\n                                    isFinish={isFinish}\n                                    isWall={isWall}\n                                    onMouseDown={(row, col) => handleMouseDown(row, col)}\n                                    onMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                                    onMouseUp={(row, col) => handleMouseUp(row, col)}\n                                ></Node>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}