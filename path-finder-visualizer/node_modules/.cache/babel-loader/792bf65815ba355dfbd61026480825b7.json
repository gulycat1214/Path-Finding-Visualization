{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport NavigationBar from './NavigationBar';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { dijkstra, getNodesInShortestPathOrder } from '../Algorithms/Dijkstra';\nimport HelpDialog from './HelpDialog';\nconst useStyles = makeStyles({\n  button1: {\n    margin: '20px',\n    backgroundColor: 'red',\n    fontWeight: 'bold'\n  },\n  button2: {\n    margin: '20px',\n    backgroundColor: 'green',\n    fontWeight: 'bold'\n  },\n  button3: {\n    margin: '20px',\n    backgroundColor: 'purple',\n    fontWeight: 'bold'\n  },\n  button4: {\n    margin: '20px',\n    backgroundColor: 'yellow',\n    fontWeight: 'bold'\n  },\n  button5: {\n    margin: '20px',\n    backgroundColor: 'brown',\n    fontWeight: 'bold'\n  }\n});\nexport default function PathfindingVisualizer() {\n  _s();\n\n  const classes = useStyles();\n  const BOARD_WIDTH = 55;\n  const BOARD_LENGTH = 20;\n  const INITIAL_POS_x = 7;\n  const INITIAL_POS_y = 8;\n  const FINAL_POS_x = 19;\n  const FINAL_POS_y = 48;\n  const [nodes, setNodes] = useState([]);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const [initial, setInitial] = useState(false);\n\n  const handleMouseEnter = (row, col) => {\n    if (!mouseIsPressed) return;\n\n    if (!initial) {\n      const newGrid = addOrDeleteWall(nodes, row, col);\n      setNodes(newGrid);\n    }\n  };\n\n  const handleMouseDown = (row, col) => {\n    setMouseIsPressed(true);\n\n    if (nodeIsInitialOrLast(row, col)) {\n      const newGrid = moveFinalOrLastSquare(nodes, row, col);\n      setInitial(true);\n      setNodes(newGrid);\n    } else {\n      const newGrid = addOrDeleteWall(nodes, row, col);\n      setNodes(newGrid);\n    }\n  };\n\n  const handleMouseUp = (row, col) => {\n    if (initial) {\n      console.log('true');\n      const newGrid = moveFinalOrLastSquare(nodes, row, col);\n      setNodes(newGrid);\n    }\n\n    console.log('enter');\n    setMouseIsPressed(false);\n  };\n\n  const animatedDijkstra = (visitedNodes, shortestPath) => {\n    for (let i = 1; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          showPath(shortestPath);\n        }, i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n\n        if (node.col !== FINAL_POS_y || node.row !== FINAL_POS_x) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-is-visited';\n        }\n      }, i);\n    }\n  };\n\n  const computeDijkstra = () => {\n    const visitedNodes = dijkstra(nodes, nodes[INITIAL_POS_x][INITIAL_POS_y], nodes[FINAL_POS_x][FINAL_POS_y]);\n    console.log(visitedNodes);\n    const shortestPath = getNodesInShortestPathOrder(nodes[FINAL_POS_x][FINAL_POS_y]);\n    animatedDijkstra(visitedNodes, shortestPath);\n  };\n\n  const showPath = nodes => {\n    if (nodes.length === 1) {\n      alert('No path');\n      return;\n    }\n\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodeIsInitialOrLast(nodes[i].row, nodes[i].col)) continue;\n      setTimeout(function () {\n        document.getElementById(`node-${nodes[i].row}-${nodes[i].col}`).className = 'node node-is-path';\n      }, 10);\n    }\n  };\n\n  const nodeIsInitialOrLast = (row, col) => {\n    if (row === INITIAL_POS_x && col === INITIAL_POS_y || row === FINAL_POS_x && col === FINAL_POS_y) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const clearGrid = () => {\n    setNodes(createEmptyGrid());\n\n    for (let row = 0; row < BOARD_LENGTH; row++) {\n      for (let col = 0; col < BOARD_WIDTH; col++) {\n        if (nodeIsInitialOrLast(row, col)) continue;\n        document.getElementById(`node-${row}-${col}`).className = 'node';\n      }\n    }\n  };\n\n  const createEmptyGrid = () => {\n    let nodes = [];\n\n    for (let row = 0; row < BOARD_LENGTH; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < BOARD_WIDTH; col++) {\n        let currentNode = {\n          row,\n          col,\n          isStart: row === INITIAL_POS_x && col === INITIAL_POS_y,\n          isFinish: row === FINAL_POS_x && col === FINAL_POS_y,\n          isWall: false,\n          isVisited: false,\n          distance: row === INITIAL_POS_x && col === INITIAL_POS_y ? 0 : Infinity,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    console.log(nodes);\n    return nodes;\n  };\n\n  useEffect(() => {\n    setNodes(createEmptyGrid());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavigationBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.button1,\n        onClick: () => alert('No more algorithms yet'),\n        children: \"DIJKSTRA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.button2,\n        onClick: () => computeDijkstra(),\n        children: \"VISUALIZE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.button4,\n        onClick: () => clearGrid(),\n        children: \"CLEAR GRID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(HelpDialog, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: nodes.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIndex) => {\n            const {\n              row,\n              col,\n              isStart,\n              isFinish,\n              isWall\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              row: row,\n              col: col,\n              isStart: isStart,\n              isFinish: isFinish,\n              isWall: isWall,\n              onMouseDown: (row, col) => handleMouseDown(row, col),\n              onMouseEnter: (row, col) => handleMouseEnter(row, col),\n              onMouseUp: (row, col) => handleMouseUp(row, col)\n            }, nodeIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PathfindingVisualizer, \"LEYKlBCoz4KHfOvtwqDqBxAj0yY=\", false, function () {\n  return [useStyles];\n});\n\n_c = PathfindingVisualizer;\n\nconst addOrDeleteWall = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst moveFinalOrLastSquare = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStart: !node.isStart\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js"],"names":["React","useEffect","useState","Node","NavigationBar","Button","makeStyles","dijkstra","getNodesInShortestPathOrder","HelpDialog","useStyles","button1","margin","backgroundColor","fontWeight","button2","button3","button4","button5","PathfindingVisualizer","classes","BOARD_WIDTH","BOARD_LENGTH","INITIAL_POS_x","INITIAL_POS_y","FINAL_POS_x","FINAL_POS_y","nodes","setNodes","mouseIsPressed","setMouseIsPressed","initial","setInitial","handleMouseEnter","row","col","newGrid","addOrDeleteWall","handleMouseDown","nodeIsInitialOrLast","moveFinalOrLastSquare","handleMouseUp","console","log","animatedDijkstra","visitedNodes","shortestPath","i","length","setTimeout","showPath","node","document","getElementById","className","computeDijkstra","alert","clearGrid","createEmptyGrid","currentRow","currentNode","isStart","isFinish","isWall","isVisited","distance","Infinity","previousNode","push","map","rowIndex","nodeIndex","grid","slice","newNode"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport NavigationBar from './NavigationBar';\nimport {\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\nimport HelpDialog from './HelpDialog';\n\nconst useStyles = makeStyles({\n    button1: {\n        margin: '20px',\n        backgroundColor: 'red',\n        fontWeight: 'bold'\n    },\n    button2: {\n        margin: '20px',\n        backgroundColor: 'green',\n        fontWeight: 'bold'\n    },\n    button3: {\n        margin: '20px',\n        backgroundColor: 'purple',\n        fontWeight: 'bold'\n    },\n    button4: {\n        margin: '20px',\n        backgroundColor: 'yellow',\n        fontWeight: 'bold'\n    },\n    button5: {\n        margin: '20px',\n        backgroundColor: 'brown',\n        fontWeight: 'bold'\n    },\n})\n\nexport default function PathfindingVisualizer(){\n\n    const classes = useStyles();\n\n    const BOARD_WIDTH = 55;\n    const BOARD_LENGTH = 20;\n    const INITIAL_POS_x = 7;\n    const INITIAL_POS_y = 8;\n    const FINAL_POS_x = 19;\n    const FINAL_POS_y = 48;\n\n\n    const [nodes, setNodes] = useState([]);\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\n    const [initial, setInitial] = useState(false);\n\n    const handleMouseEnter = (row, col) => {\n        if(!mouseIsPressed) return;\n        if(!initial){\n            const newGrid = addOrDeleteWall(nodes, row, col);\n            setNodes(newGrid);             \n        }\n    }\n    \n    const handleMouseDown = (row, col) => {\n        setMouseIsPressed(true);\n        if(nodeIsInitialOrLast(row, col)) {\n            const newGrid = moveFinalOrLastSquare(nodes, row, col);\n            setInitial(true);\n            setNodes(newGrid);\n        } else {\n            const newGrid = addOrDeleteWall(nodes, row, col)\n            setNodes(newGrid);            \n        }\n    }\n\n    const handleMouseUp = (row, col) => {\n        if(initial) {\n            console.log('true')\n            const newGrid = moveFinalOrLastSquare(nodes, row, col);\n            setNodes(newGrid);            \n        }\n        console.log('enter')\n        setMouseIsPressed(false);\n    }\n\n    const animatedDijkstra = (visitedNodes, shortestPath) => {\n        for(let i = 1; i <= visitedNodes.length; i++) {\n            if ( i === visitedNodes.length) {\n                setTimeout(() => {\n                    showPath(shortestPath);\n                }, i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodes[i];\n                if(node.col !== FINAL_POS_y || node.row !== FINAL_POS_x) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-is-visited';   \n                }\n            }, i)\n        }\n    }\n\n    const computeDijkstra = () => {\n        const visitedNodes = dijkstra(nodes, nodes[INITIAL_POS_x][INITIAL_POS_y], nodes[FINAL_POS_x][FINAL_POS_y]);\n        console.log(visitedNodes);\n        const shortestPath = getNodesInShortestPathOrder(nodes[FINAL_POS_x][FINAL_POS_y]);\n        animatedDijkstra(visitedNodes, shortestPath);\n    }\n\n    const showPath = (nodes) => {\n        if(nodes.length === 1) {\n            alert('No path')\n            return;\n        }\n        for(let i = 0; i < nodes.length; i++) {\n            if( nodeIsInitialOrLast(nodes[i].row, nodes[i].col) ) continue;\n            setTimeout(function() {\n                document.getElementById(`node-${nodes[i].row}-${nodes[i].col}`).className = 'node node-is-path';\n            }, 10);\n        }\n    }\n\n\n    const nodeIsInitialOrLast = (row, col) => {\n        if( (row === INITIAL_POS_x && col === INITIAL_POS_y) \n        || (row === FINAL_POS_x && col === FINAL_POS_y)) {\n            return true;\n        }\n        return false;\n    }\n\n    const clearGrid = () => {\n        setNodes(createEmptyGrid());\n        for( let row = 0; row < BOARD_LENGTH; row++) {\n            for( let col = 0; col < BOARD_WIDTH; col++) {\n                if(nodeIsInitialOrLast(row, col)) continue;\n                document.getElementById(`node-${row}-${col}`).className = 'node'; \n            }\n        }\n    }\n\n    const createEmptyGrid = () => {\n        let nodes = [];\n        for( let row = 0; row < BOARD_LENGTH; row++) {\n            const currentRow = [];\n            for( let col = 0; col < BOARD_WIDTH; col++) {\n                let currentNode = {\n                    row,\n                    col,\n                    isStart: row === INITIAL_POS_x && col === INITIAL_POS_y,\n                    isFinish: row === FINAL_POS_x && col === FINAL_POS_y,\n                    isWall: false,\n                    isVisited: false,\n                    distance: (row === INITIAL_POS_x && col === INITIAL_POS_y) ? 0 : Infinity,\n                    previousNode: null\n                }\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        console.log(nodes);\n        return nodes;       \n    }\n\n    useEffect(() => {\n        setNodes(createEmptyGrid());\n    }, []);\n\n    return(\n        <>\n        <NavigationBar></NavigationBar>\n        <div className=\"buttons-container\">\n            <Button variant=\"contained\" className={classes.button1} onClick={() => alert('No more algorithms yet')}>DIJKSTRA</Button>\n            <Button variant=\"contained\" className={classes.button2} onClick={() => computeDijkstra()}>VISUALIZE</Button>\n            <Button variant=\"contained\" className={classes.button4} onClick={() => clearGrid()}>CLEAR GRID</Button>\n            <HelpDialog></HelpDialog>\n        </div>\n        <div className=\"grid\">\n            {nodes.map((row, rowIndex) => {\n                return(\n                    <div>\n                        {row.map((node, nodeIndex) => {\n                            const {row, col, isStart, isFinish, isWall} = node;\n                            return(\n                                <Node\n                                    row={row}\n                                    col={col}\n                                    key={nodeIndex}\n                                    isStart={isStart}\n                                    isFinish={isFinish}\n                                    isWall={isWall}\n                                    onMouseDown={(row, col) => handleMouseDown(row, col)}\n                                    onMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                                    onMouseUp={(row, col) => handleMouseUp(row, col)}\n                                ></Node>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n        </>\n    );\n}\n\nconst addOrDeleteWall = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n}\n\nconst moveFinalOrLastSquare = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isStart: !node.isStart,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n}"]},"metadata":{},"sourceType":"module"}