{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nexport default function PathfindingVisualizer() {\n  _s();\n\n  const [nodes, setNodes] = useState([]);\n  useEffect(() => {\n    for (let row = 0; row < 15; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          row,\n          col,\n          isStart: row === 0 && col === 0,\n          isFinish: row === 1 && col === 4\n        };\n        currentRow.push('a');\n      }\n\n      nodes.push(currentRow);\n    }\n\n    setNodes(nodes);\n    console.log(nodes);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: row.map((node, nodeIndex) => /*#__PURE__*/_jsxDEV(Node, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 55\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PathfindingVisualizer, \"PbTFKmE3ANQd50N7lqnMXthrMF4=\");\n\n_c = PathfindingVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js"],"names":["React","Component","useEffect","useState","Node","PathfindingVisualizer","nodes","setNodes","row","currentRow","col","currentNode","isStart","isFinish","push","console","log","map","rowIndex","node","nodeIndex"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,6BAAP;AACA,eAAe,SAASC,qBAAT,GAAgC;AAAA;;AAE3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,SAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AAC/B,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AAC/B,cAAMC,WAAW,GAAG;AAChBH,UAAAA,GADgB;AAEhBE,UAAAA,GAFgB;AAGhBE,UAAAA,OAAO,EAAEJ,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK,CAHd;AAIhBG,UAAAA,QAAQ,EAAEL,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK;AAJf,SAApB;AAMAD,QAAAA,UAAU,CAACK,IAAX,CAAgB,GAAhB;AACH;;AACDR,MAAAA,KAAK,CAACQ,IAAN,CAAWL,UAAX;AACH;;AACDF,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACH,GAhBQ,CAAT;AAkBA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACKA,KAAK,CAACW,GAAN,CAAU,CAACT,GAAD,EAAMU,QAAN,KAAmB;AAC1B,0BACI;AAAA,kBACKV,GAAG,CAACS,GAAJ,CAAQ,CAACE,IAAD,EAAOC,SAAP,kBAAqB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBAA7B;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KANA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAjCuBf,qB;;KAAAA,qB","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css'\nexport default function PathfindingVisualizer(){\n\n    const [nodes, setNodes] = useState([]);\n\n    useEffect(() => {\n        for( let row = 0; row < 15; row++) {\n            const currentRow = [];\n            for( let col = 0; col < 50; col++) {\n                const currentNode = {\n                    row,\n                    col,\n                    isStart: row === 0 && col === 0,\n                    isFinish: row === 1 && col === 4,\n                };\n                currentRow.push('a');\n            }\n            nodes.push(currentRow);\n        }\n        setNodes(nodes);\n        console.log(nodes);\n    });\n\n    return(\n        <div className=\"grid\">\n            {nodes.map((row, rowIndex) => {\n                return(\n                    <div>\n                        {row.map((node, nodeIndex) => <Node></Node>)}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}