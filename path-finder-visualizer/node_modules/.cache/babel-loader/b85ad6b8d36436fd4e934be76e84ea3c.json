{"ast":null,"code":"export function bfs(grid, startNode, finishNode) {\n  const unvisitedNodes = getAllNodes(grid);\n}\n\nfunction getNeighbors(grid, node) {\n  let neighbors = [];\n  if (node.row > 0) neighbors.push(grid[node.row - 1][node.col]);\n  if (node.col > 0) neighbors.push(grid[node.row][node.col - 1]);\n  if (node.row < grid.length - 1) neighbors.push(grid[node.row + 1][node.col]);\n  if (node.col < grid[0].length - 1) neighbors.push(grid[node.row][node.col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/Algorithms/Bfs.js"],"names":["bfs","grid","startNode","finishNode","unvisitedNodes","getAllNodes","getNeighbors","node","neighbors","row","push","col","length","filter","neighbor","isVisited"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0C;AAC7C,QAAMC,cAAc,GAAGC,WAAW,CAACJ,IAAD,CAAlC;AACH;;AAID,SAASK,YAAT,CAAsBL,IAAtB,EAA4BM,IAA5B,EAAkC;AAC9B,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAGD,IAAI,CAACE,GAAL,GAAW,CAAd,EAAiBD,SAAS,CAACE,IAAV,CAAeT,IAAI,CAACM,IAAI,CAACE,GAAL,GAAS,CAAV,CAAJ,CAAiBF,IAAI,CAACI,GAAtB,CAAf;AACjB,MAAGJ,IAAI,CAACI,GAAL,GAAW,CAAd,EAAiBH,SAAS,CAACE,IAAV,CAAeT,IAAI,CAACM,IAAI,CAACE,GAAN,CAAJ,CAAeF,IAAI,CAACI,GAAL,GAAS,CAAxB,CAAf;AACjB,MAAGJ,IAAI,CAACE,GAAL,GAAWR,IAAI,CAACW,MAAL,GAAc,CAA5B,EAA+BJ,SAAS,CAACE,IAAV,CAAeT,IAAI,CAACM,IAAI,CAACE,GAAL,GAAS,CAAV,CAAJ,CAAiBF,IAAI,CAACI,GAAtB,CAAf;AAC/B,MAAGJ,IAAI,CAACI,GAAL,GAAWV,IAAI,CAAC,CAAD,CAAJ,CAAQW,MAAR,GAAgB,CAA9B,EAAiCJ,SAAS,CAACE,IAAV,CAAeT,IAAI,CAACM,IAAI,CAACE,GAAN,CAAJ,CAAeF,IAAI,CAACI,GAAL,GAAS,CAAxB,CAAf;AACjC,SAAOH,SAAS,CAACK,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACC,SAAvC,CAAP;AACH","sourcesContent":["export function bfs(grid, startNode, finishNode) {\n    const unvisitedNodes = getAllNodes(grid);\n}\n\n\n\nfunction getNeighbors(grid, node) {\n    let neighbors = [];\n    if(node.row > 0) neighbors.push(grid[node.row-1][node.col]);\n    if(node.col > 0) neighbors.push(grid[node.row][node.col-1]);\n    if(node.row < grid.length - 1) neighbors.push(grid[node.row+1][node.col]);\n    if(node.col < grid[0].length -1) neighbors.push(grid[node.row][node.col+1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\n"]},"metadata":{},"sourceType":"module"}