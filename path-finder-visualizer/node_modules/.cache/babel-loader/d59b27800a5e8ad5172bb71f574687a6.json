{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport { dijkstra, getNodesInShortestPathOrder } from '../Algorithms/Dijkstra';\nexport default function PathfindingVisualizer() {\n  _s();\n\n  const BOARD_WIDTH = 90;\n  const BOARD_LENGTH = 40;\n  const INITIAL_POS_x = 0;\n  const INITIAL_POS_y = 0;\n  const FINAL_POS_x = 14;\n  const FINAL_POS_y = 49;\n  const [nodes, setNodes] = useState([]);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  const handleMouseEnter = (row, col) => {\n    if (!mouseIsPressed) return;\n    const newGrid = addOrDeleteWall(nodes, row, col);\n    setNodes(newGrid);\n  };\n\n  const handleMouseDown = (row, col) => {\n    const newGrid = addOrDeleteWall(nodes, row, col);\n    setMouseIsPressed(true);\n  };\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  };\n\n  const animatedDijkstra = visitedNodes => {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      const node = visitedNodes[i];\n      setTimeout(function () {\n        document.getElementById(`node-${nodes.row}-${nodes.col}`).className = 'node node-is-visited';\n      }, 200);\n    }\n  };\n\n  const computeDijkstra = () => {\n    const visitedNodes = dijkstra(nodes, nodes[INITIAL_POS_x][INITIAL_POS_y], nodes[FINAL_POS_x][FINAL_POS_y]);\n    console.log(visitedNodes);\n    const shortestPath = getNodesInShortestPathOrder(nodes[FINAL_POS_x][FINAL_POS_y]);\n    animatedDijkstra(visitedNodes);\n    showPath(shortestPath);\n  };\n\n  const showPath = nodes => {\n    if (nodes.length === 1) {\n      alert('No path');\n      return;\n    }\n\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodes[i].row === INITIAL_POS_x && nodes[i].col === INITIAL_POS_y || nodes[i].row === FINAL_POS_x && nodes[i].col === FINAL_POS_y) continue;\n      setTimeout(function () {\n        document.getElementById(`node-${nodes[i].row}-${nodes[i].col}`).className = 'node node-is-path';\n      }, 200);\n    }\n  };\n\n  useEffect(() => {\n    let nodes = [];\n\n    for (let row = 0; row < BOARD_LENGTH; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < BOARD_WIDTH; col++) {\n        let currentNode = {\n          row,\n          col,\n          isStart: row === INITIAL_POS_x && col === INITIAL_POS_y,\n          isFinish: row === FINAL_POS_x && col === FINAL_POS_y,\n          isWall: false,\n          isVisited: false,\n          distance: row === INITIAL_POS_x && col === INITIAL_POS_y ? 0 : Infinity,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    setNodes(nodes);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: nodes.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIndex) => {\n            const {\n              row,\n              col,\n              isStart,\n              isFinish,\n              isWall\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              row: row,\n              col: col,\n              isStart: isStart,\n              isFinish: isFinish,\n              isWall: isWall,\n              onMouseDown: (row, col) => handleMouseDown(row, col),\n              onMouseEnter: (row, col) => handleMouseEnter(row, col),\n              onMouseUp: () => handleMouseUp()\n            }, nodeIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => computeDijkstra(),\n        type: \"button\",\n        children: \"Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PathfindingVisualizer, \"xd3vv7+NHRqOmZKB+OzMvKzbqXM=\");\n\n_c = PathfindingVisualizer;\n\nconst addOrDeleteWall = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js"],"names":["React","useEffect","useState","Node","dijkstra","getNodesInShortestPathOrder","PathfindingVisualizer","BOARD_WIDTH","BOARD_LENGTH","INITIAL_POS_x","INITIAL_POS_y","FINAL_POS_x","FINAL_POS_y","nodes","setNodes","mouseIsPressed","setMouseIsPressed","handleMouseEnter","row","col","newGrid","addOrDeleteWall","handleMouseDown","handleMouseUp","animatedDijkstra","visitedNodes","i","length","node","setTimeout","document","getElementById","className","computeDijkstra","console","log","shortestPath","showPath","alert","currentRow","currentNode","isStart","isFinish","isWall","isVisited","distance","Infinity","previousNode","push","map","rowIndex","nodeIndex","grid","slice","newNode"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\n\nexport default function PathfindingVisualizer(){\n\n    const BOARD_WIDTH = 90;\n    const BOARD_LENGTH = 40;\n    const INITIAL_POS_x = 0;\n    const INITIAL_POS_y = 0;\n    const FINAL_POS_x = 14;\n    const FINAL_POS_y = 49;\n\n    const [nodes, setNodes] = useState([]);\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n    const handleMouseEnter = (row, col) => {\n        if(!mouseIsPressed) return;\n        const newGrid = addOrDeleteWall(nodes, row, col);\n        setNodes(newGrid);   \n    }\n    \n    const handleMouseDown = (row, col) => {\n        const newGrid = addOrDeleteWall(nodes, row, col)\n        setMouseIsPressed(true);\n    }\n\n    const handleMouseUp = () => {\n        setMouseIsPressed(false);\n    }\n\n    const animatedDijkstra = (visitedNodes) => {\n        for(let i = 0; i < visitedNodes.length; i++) {\n            const node = visitedNodes[i];\n            setTimeout(function() {\n                document.getElementById(`node-${nodes.row}-${nodes.col}`).className = 'node node-is-visited';\n            }, 200);\n        }\n    }\n\n    const computeDijkstra = () => {\n        const visitedNodes = dijkstra(nodes, nodes[INITIAL_POS_x][INITIAL_POS_y], nodes[FINAL_POS_x][FINAL_POS_y]);\n        console.log(visitedNodes);\n        const shortestPath = getNodesInShortestPathOrder(nodes[FINAL_POS_x][FINAL_POS_y]);\n        animatedDijkstra(visitedNodes);\n        showPath(shortestPath);\n    }\n\n    const showPath = (nodes) => {\n        if(nodes.length === 1) {\n            alert('No path')\n            return;\n        }\n        for(let i = 0; i < nodes.length; i++) {\n            if( (nodes[i].row === INITIAL_POS_x && nodes[i].col === INITIAL_POS_y) \n                || (nodes[i].row === FINAL_POS_x && nodes[i].col === FINAL_POS_y)) continue;\n            setTimeout(function() {\n                document.getElementById(`node-${nodes[i].row}-${nodes[i].col}`).className = 'node node-is-path';\n            }, 200);\n        }\n    }\n\n\n    useEffect(() => {\n        let nodes = [];\n        for( let row = 0; row < BOARD_LENGTH; row++) {\n            const currentRow = [];\n            for( let col = 0; col < BOARD_WIDTH; col++) {\n                let currentNode = {\n                    row,\n                    col,\n                    isStart: row === INITIAL_POS_x && col === INITIAL_POS_y,\n                    isFinish: row === FINAL_POS_x && col === FINAL_POS_y,\n                    isWall: false,\n                    isVisited: false,\n                    distance: (row === INITIAL_POS_x && col === INITIAL_POS_y) ? 0 : Infinity,\n                    previousNode: null\n                }\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        setNodes(nodes);\n    }, []);\n\n    return(\n        <>\n        <div className=\"grid\">\n            {nodes.map((row, rowIndex) => {\n                return(\n                    <div>\n                        {row.map((node, nodeIndex) => {\n                            const {row, col, isStart, isFinish, isWall} = node;\n                            return(\n                                <Node\n                                    row={row}\n                                    col={col}\n                                    key={nodeIndex}\n                                    isStart={isStart}\n                                    isFinish={isFinish}\n                                    isWall={isWall}\n                                    onMouseDown={(row, col) => handleMouseDown(row, col)}\n                                    onMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                                    onMouseUp={() => handleMouseUp()}\n                                ></Node>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n        <div className=\"button\">\n            <button\n                onClick={() => computeDijkstra()}\n                type=\"button\"\n            >Dijkstra</button>\n            <button\n                type=\"button\"\n            >Clear</button>\n        </div>\n        </>\n    );\n}\n\nconst addOrDeleteWall = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n}"]},"metadata":{},"sourceType":"module"}