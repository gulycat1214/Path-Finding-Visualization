{"ast":null,"code":"export function bfs(grid, startNode, finishNode) {\n  const unvisitedNodes = getAllNodes(grid);\n  const visitedNodes = [];\n\n  while (unvisitedNodes.length != 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodes;\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n    if (closestNode === finishNode) return visitedNodes;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction getNeighbors(grid, node) {\n  let neighbors = [];\n  if (node.row > 0) neighbors.push(grid[node.row - 1][node.col]);\n  if (node.col > 0) neighbors.push(grid[node.row][node.col - 1]);\n  if (node.row < grid.length - 1) neighbors.push(grid[node.row + 1][node.col]);\n  if (node.col < grid[0].length - 1) neighbors.push(grid[node.row][node.col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/Algorithms/Bfs.js"],"names":["bfs","grid","startNode","finishNode","unvisitedNodes","getAllNodes","visitedNodes","length","sortNodesByDistance","closestNode","shift","isWall","distance","Infinity","isVisited","push","updateUnvisitedNeighbors","getNeighbors","node","neighbors","row","col","filter","neighbor"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0C;AAC7C,QAAMC,cAAc,GAAGC,WAAW,CAACJ,IAAD,CAAlC;AACA,QAAMK,YAAY,GAAG,EAArB;;AACA,SAAMF,cAAc,CAACG,MAAf,IAAyB,CAA/B,EAAkC;AAC9BC,IAAAA,mBAAmB,CAACJ,cAAD,CAAnB;AACA,UAAMK,WAAW,GAAGL,cAAc,CAACM,KAAf,EAApB;AACA,QAAGD,WAAW,CAACE,MAAf,EAAuB;AACvB,QAAGF,WAAW,CAACG,QAAZ,KAAyBC,QAA5B,EAAsC,OAAOP,YAAP;AACtCG,IAAAA,WAAW,CAACK,SAAZ,GAAwB,IAAxB;AACAR,IAAAA,YAAY,CAACS,IAAb,CAAkBN,WAAlB;AACA,QAAGA,WAAW,KAAKN,UAAnB,EAA+B,OAAOG,YAAP;AAC/BU,IAAAA,wBAAwB,CAACP,WAAD,EAAcR,IAAd,CAAxB;AACH;AACJ;;AAID,SAASgB,YAAT,CAAsBhB,IAAtB,EAA4BiB,IAA5B,EAAkC;AAC9B,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAGD,IAAI,CAACE,GAAL,GAAW,CAAd,EAAiBD,SAAS,CAACJ,IAAV,CAAed,IAAI,CAACiB,IAAI,CAACE,GAAL,GAAS,CAAV,CAAJ,CAAiBF,IAAI,CAACG,GAAtB,CAAf;AACjB,MAAGH,IAAI,CAACG,GAAL,GAAW,CAAd,EAAiBF,SAAS,CAACJ,IAAV,CAAed,IAAI,CAACiB,IAAI,CAACE,GAAN,CAAJ,CAAeF,IAAI,CAACG,GAAL,GAAS,CAAxB,CAAf;AACjB,MAAGH,IAAI,CAACE,GAAL,GAAWnB,IAAI,CAACM,MAAL,GAAc,CAA5B,EAA+BY,SAAS,CAACJ,IAAV,CAAed,IAAI,CAACiB,IAAI,CAACE,GAAL,GAAS,CAAV,CAAJ,CAAiBF,IAAI,CAACG,GAAtB,CAAf;AAC/B,MAAGH,IAAI,CAACG,GAAL,GAAWpB,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,GAAgB,CAA9B,EAAiCY,SAAS,CAACJ,IAAV,CAAed,IAAI,CAACiB,IAAI,CAACE,GAAN,CAAJ,CAAeF,IAAI,CAACG,GAAL,GAAS,CAAxB,CAAf;AACjC,SAAOF,SAAS,CAACG,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACT,SAAvC,CAAP;AACH","sourcesContent":["export function bfs(grid, startNode, finishNode) {\n    const unvisitedNodes = getAllNodes(grid);\n    const visitedNodes = [];\n    while(unvisitedNodes.length != 0) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        if(closestNode.isWall) continue;\n        if(closestNode.distance === Infinity) return visitedNodes;\n        closestNode.isVisited = true;\n        visitedNodes.push(closestNode);\n        if(closestNode === finishNode) return visitedNodes;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\n\n\nfunction getNeighbors(grid, node) {\n    let neighbors = [];\n    if(node.row > 0) neighbors.push(grid[node.row-1][node.col]);\n    if(node.col > 0) neighbors.push(grid[node.row][node.col-1]);\n    if(node.row < grid.length - 1) neighbors.push(grid[node.row+1][node.col]);\n    if(node.col < grid[0].length -1) neighbors.push(grid[node.row][node.col+1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\n"]},"metadata":{},"sourceType":"module"}