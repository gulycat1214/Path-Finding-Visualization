{"ast":null,"code":"export function bfs(grid, startNode) {\n  let queue = [];\n  let visitedNodes = [];\n  startNode.isVisited = true;\n  visitedNodes.push(startNode);\n  queue.push(startNode);\n\n  while (queue.length !== 0) {\n    let node = queue.shift();\n    let neighbors = getNeighbors(grid, node);\n\n    for (let i = 0; i < neighbors.length; i++) {\n      if (neighbors[i].isWall) continue;\n      if (neighbors[i].isFinish) return;\n      neighbors[i].isVisited = true;\n      visitedNodes.push(neighbors[i]);\n      neighbors[i].distance += 1;\n      neighbors[i].previousNode = node;\n      queue.push(neighbors[i]);\n    }\n  }\n}\n\nfunction getNeighbors(grid, node) {\n  console.log(grid[node.row][grid.col + 1]);\n}","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/Algorithms/Bfs.js"],"names":["bfs","grid","startNode","queue","visitedNodes","isVisited","push","length","node","shift","neighbors","getNeighbors","i","isWall","isFinish","distance","previousNode","console","log","row","col"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8B;AACjC,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,YAAY,GAAG,EAAnB;AACAF,EAAAA,SAAS,CAACG,SAAV,GAAsB,IAAtB;AACAD,EAAAA,YAAY,CAACE,IAAb,CAAkBJ,SAAlB;AACAC,EAAAA,KAAK,CAACG,IAAN,CAAWJ,SAAX;;AACA,SAAMC,KAAK,CAACI,MAAN,KAAiB,CAAvB,EAA0B;AACtB,QAAIC,IAAI,GAAGL,KAAK,CAACM,KAAN,EAAX;AACA,QAAIC,SAAS,GAAGC,YAAY,CAACV,IAAD,EAAOO,IAAP,CAA5B;;AACA,SAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,SAAS,CAACH,MAA7B,EAAqCK,CAAC,EAAtC,EAA0C;AACtC,UAAGF,SAAS,CAACE,CAAD,CAAT,CAAaC,MAAhB,EAAwB;AACxB,UAAGH,SAAS,CAACE,CAAD,CAAT,CAAaE,QAAhB,EAA0B;AAC1BJ,MAAAA,SAAS,CAACE,CAAD,CAAT,CAAaP,SAAb,GAAyB,IAAzB;AACAD,MAAAA,YAAY,CAACE,IAAb,CAAkBI,SAAS,CAACE,CAAD,CAA3B;AACAF,MAAAA,SAAS,CAACE,CAAD,CAAT,CAAaG,QAAb,IAAyB,CAAzB;AACAL,MAAAA,SAAS,CAACE,CAAD,CAAT,CAAaI,YAAb,GAA4BR,IAA5B;AACAL,MAAAA,KAAK,CAACG,IAAN,CAAWI,SAAS,CAACE,CAAD,CAApB;AACH;AAEJ;AACJ;;AAED,SAASD,YAAT,CAAsBV,IAAtB,EAA4BO,IAA5B,EAAkC;AAC9BS,EAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAI,CAACO,IAAI,CAACW,GAAN,CAAJ,CAAelB,IAAI,CAACmB,GAAL,GAAS,CAAxB,CAAZ;AACH","sourcesContent":["export function bfs(grid, startNode) {\n    let queue = [];\n    let visitedNodes = [];\n    startNode.isVisited = true;\n    visitedNodes.push(startNode);\n    queue.push(startNode);\n    while(queue.length !== 0) {\n        let node = queue.shift();\n        let neighbors = getNeighbors(grid, node);\n        for(let i = 0; i < neighbors.length; i++) {\n            if(neighbors[i].isWall) continue;\n            if(neighbors[i].isFinish) return \n            neighbors[i].isVisited = true;\n            visitedNodes.push(neighbors[i]);\n            neighbors[i].distance += 1;\n            neighbors[i].previousNode = node;\n            queue.push(neighbors[i]);\n        }\n\n    }\n}\n\nfunction getNeighbors(grid, node) {\n    console.log(grid[node.row][grid.col+1])\n}\n\n"]},"metadata":{},"sourceType":"module"}