{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport { dijkstra, getNodesInShortestPathOrder } from '../Algorithms/Dijkstra';\nexport default function PathfindingVisualizer() {\n  _s();\n\n  const [nodes, setNodes] = useState([]);\n\n  const handleMouseEnter = (row, col) => {\n    const newGrid = addOrDeleteWall(nodes, row, col);\n    setNodes(newGrid);\n  };\n\n  const test = () => {\n    const visitedNodes = dijkstra(nodes, nodes[0][0], nodes[14][49]);\n    const shortestPath = getNodesInShortestPathOrder(nodes[14][49]);\n    console.log(visitedNodes);\n  };\n\n  useEffect(() => {\n    let nodes = [];\n\n    for (let row = 0; row < 15; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        let currentNode = {\n          row,\n          col,\n          isStart: row === 0 && col === 0,\n          isFinish: row === 14 && col === 49,\n          isWall: false,\n          isVisited: false,\n          distance: row === 0 && col === 0 ? 0 : Infinity,\n          previousNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    setNodes(nodes);\n    console.log(nodes);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: nodes.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIndex) => {\n            const {\n              row,\n              col,\n              isStart,\n              isFinish,\n              isWall\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              row: row,\n              col: col,\n              isStart: isStart,\n              isFinish: isFinish,\n              isWall: isWall,\n              addWall: (row, col) => handleMouseEnter(row, col)\n            }, nodeIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => test(),\n        type: \"button\",\n        children: \"Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PathfindingVisualizer, \"PbTFKmE3ANQd50N7lqnMXthrMF4=\");\n\n_c = PathfindingVisualizer;\n\nconst addOrDeleteWall = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"sources":["/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js"],"names":["React","Component","useEffect","useState","Node","dijkstra","getNodesInShortestPathOrder","PathfindingVisualizer","nodes","setNodes","handleMouseEnter","row","col","newGrid","addOrDeleteWall","test","visitedNodes","shortestPath","console","log","currentRow","currentNode","isStart","isFinish","isWall","isVisited","distance","Infinity","previousNode","push","map","rowIndex","node","nodeIndex","grid","slice","newNode"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\n\nexport default function PathfindingVisualizer(){\n\n    const [nodes, setNodes] = useState([]);\n\n    const handleMouseEnter = (row, col) => {\n        const newGrid = addOrDeleteWall(nodes, row, col);\n        setNodes(newGrid);\n    }\n\n    const test = () => {\n        const visitedNodes = dijkstra(nodes, nodes[0][0], nodes[14][49]);\n        const shortestPath = getNodesInShortestPathOrder(nodes[14][49]);\n        console.log(visitedNodes)\n    }\n\n    useEffect(() => {\n        let nodes = [];\n        for( let row = 0; row < 15; row++) {\n            const currentRow = [];\n            for( let col = 0; col < 50; col++) {\n                let currentNode = {\n                    row,\n                    col,\n                    isStart: row === 0 && col === 0,\n                    isFinish: row === 14 && col === 49,\n                    isWall: false,\n                    isVisited: false,\n                    distance: (row === 0 && col === 0) ? 0 : Infinity,\n                    previousNode: null\n                }\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        setNodes(nodes);\n        console.log(nodes);\n    }, []);\n\n    return(\n        <>\n        <div className=\"grid\">\n            {nodes.map((row, rowIndex) => {\n                return(\n                    <div>\n                        {row.map((node, nodeIndex) => {\n                            const {row, col, isStart, isFinish, isWall} = node;\n                            return(\n                                <Node\n                                    row={row}\n                                    col={col}\n                                    key={nodeIndex}\n                                    isStart={isStart}\n                                    isFinish={isFinish}\n                                    isWall={isWall}\n                                    addWall={(row, col) => handleMouseEnter(row, col)}\n                                ></Node>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n        <div className=\"button\">\n            <button\n                onClick={() => test()}\n                type=\"button\"\n            >Dijkstra</button>\n        </div>\n        </>\n    );\n}\n\nconst addOrDeleteWall = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n}"]},"metadata":{},"sourceType":"module"}