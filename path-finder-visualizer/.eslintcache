[{"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/reportWebVitals.js":"1","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/App.js":"2","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/index.js":"3","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js":"4","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/Node.js":"5","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/Algorithms/Dijkstra.js":"6","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/NavigationBar.js":"7","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/HelpDialog.js":"8"},{"size":362,"mtime":1611589045586,"results":"9","hashOfConfig":"10"},{"size":192,"mtime":1611589513836,"results":"11","hashOfConfig":"10"},{"size":478,"mtime":1611589230031,"results":"12","hashOfConfig":"10"},{"size":6510,"mtime":1611777190937,"results":"13","hashOfConfig":"10"},{"size":603,"mtime":1611773924530,"results":"14","hashOfConfig":"10"},{"size":1835,"mtime":1611668402563,"results":"15","hashOfConfig":"10"},{"size":548,"mtime":1611765389436,"results":"16","hashOfConfig":"10"},{"size":2323,"mtime":1611776929697,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nfskhd",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/reportWebVitals.js",[],"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/App.js",[],"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/index.js",[],"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.js",[],"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/Node.js",["36"],"/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/Algorithms/Dijkstra.js",["37"],"export function dijkstra(grid, startNode, finishNode) {\n    const unvisistedNodes = getAllNodes(grid);\n    const visitedNodes = [];\n    while(unvisistedNodes.length != 0) {\n        sortNodesByDistance(unvisistedNodes);\n        const closestNode = unvisistedNodes.shift();\n        if(closestNode.isWall) continue;\n        if(closestNode.distance === Infinity) return visitedNodes;\n        closestNode.isVisited = true;\n        visitedNodes.push(closestNode);\n        if(closestNode === finishNode) return visitedNodes;\n        updateUnvisistedNodes(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisistedNodes) {\n    unvisistedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisistedNodes(node, grid) {\n    const unvisitedNodes = getUnvisitedNeighbors(node, grid);\n    for(const neighbor of unvisitedNodes) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if(row > 0) neighbors.push(grid[row-1][col]);\n    if(row < grid.length - 1) neighbors.push(grid[row+1][col]);\n    if(col > 0) neighbors.push(grid[row][col-1]);\n    if(col < grid[0].length - 1) neighbors.push(grid[row][col+1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for(const row of grid) {\n        for(const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPath = [];\n    let currentNode = finishNode;\n    while(currentNode != null) {\n        nodesInShortestPath.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPath;\n}\n\n\n\n\n\n\n\n\n\n\n","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/NavigationBar.js",["38"],"import React from 'react';\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    Button,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nexport default function NavigationBar() {\n  const classes = useStyles();\n    return(\n    <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.text}>\n            PATHFINDING VISUALIZER TOOL\n          </Typography>\n        </Toolbar>\n      </AppBar>  \n    )\n}\n\nconst useStyles = makeStyles({\n  text: {\n    fontWeight: 'bold'\n  }\n})\n","/home/willi/Escritorio/Dev/Pathfinding Visualization/path-finder-visualizer/src/PathfindingVisualizer/HelpDialog.js",[],{"ruleId":"39","severity":1,"message":"40","line":1,"column":16,"nodeType":"41","messageId":"42","endLine":1,"endColumn":24},{"ruleId":"43","severity":1,"message":"44","line":4,"column":34,"nodeType":"45","messageId":"46","endLine":4,"endColumn":36},{"ruleId":"39","severity":1,"message":"47","line":6,"column":5,"nodeType":"41","messageId":"42","endLine":6,"endColumn":11},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Button' is defined but never used."]