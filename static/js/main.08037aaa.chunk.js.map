{"version":3,"sources":["PathfindingVisualizer/Node.js","PathfindingVisualizer/NavigationBar.js","Algorithms/Dijkstra.js","Algorithms/Bfs.js","PathfindingVisualizer/HelpDialog.js","PathfindingVisualizer/AlgorithmSelector.js","PathfindingVisualizer/PathfindingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","row","col","isFinish","isStart","isWall","onMouseDown","onMouseUp","onMouseEnter","extraClassName","id","className","NavigationBar","classes","useStyles","AppBar","position","Toolbar","Typography","variant","text","makeStyles","fontWeight","dijkstra","grid","startNode","finishNode","unvisistedNodes","nodes","node","push","getAllNodes","visitedNodes","length","sortNodesByDistance","closestNode","shift","distance","Infinity","isVisited","updateUnvisistedNodes","sort","nodeA","nodeB","unvisitedNodes","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPath","currentNode","unshift","bfs","updateUnvisitedNeighbors","getNeighbors","HelpDialog","React","useState","open","setOpen","handleClose","button1","margin","backgroundColor","Button","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","color","AlgorithmSelector","changeAlgorithm","currentAlgorithm","button2","map","algorithmName","index","button3","button4","button5","PathfindingVisualizer","FINAL_POS_y","algorithm","setAlgorithm","setGrid","mouseIsPressed","setMouseIsPressed","animatedVisualization","shortestPath","i","setTimeout","showPath","document","getElementById","visualizeAlgorithm","computeDijkstra","computeBfs","alert","nodeIsInitialOrLast","createEmptyGrid","currentRow","addOrDeleteWall","newGrid","slice","newNode","useEffect","clearGrid","rowIndex","nodeIndex","handleMouseDown","handleMouseEnter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.08037aaa.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Node.css';\nexport default function Node (props) {\n\n    const {row, col, isFinish, isStart, isWall, onMouseDown, onMouseUp, onMouseEnter} = props;\n    const extraClassName = isFinish ? 'node-finish' : isStart ? 'node-start' : isWall ? 'node-is-wall' : '';\n\n    return(\n        <div \n            id={`node-${row}-${col}`}\n            className={`node ${extraClassName}`}\n            onMouseUp={() => onMouseUp(row, col)}\n            onMouseDown={() => onMouseDown(row, col)}\n            onMouseEnter={() => onMouseEnter(row, col)}\n        >\n        </div>\n    );\n}","import React from 'react';\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    Button,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nexport default function NavigationBar() {\n  const classes = useStyles();\n    return(\n    <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.text}>\n            PATHFINDING VISUALIZER TOOL\n          </Typography>\n        </Toolbar>\n      </AppBar>  \n    )\n}\n\nconst useStyles = makeStyles({\n  text: {\n    fontWeight: 'bold'\n  }\n})\n","// Implementation of DIJKSTRA's ALGORITHM\n// Functionality:\n// - Set all nodes with distance Infinity to initial node\n// - Sort all nodes by distance to initial node and\n//      get the nearest node\n// - Mark this node as visited, increment distance to origin\n// - Get neighbor nodes and sort again\n// - When arriving to final Node, backtrack to find shortest path.\n\n\nexport function dijkstra(grid, startNode, finishNode) {\n    const unvisistedNodes = getAllNodes(grid);\n    const visitedNodes = [];\n    while(unvisistedNodes.length != 0) {\n        // get nearest node\n        sortNodesByDistance(unvisistedNodes);\n        const closestNode = unvisistedNodes.shift();\n        if(closestNode.isWall) continue;\n        if(closestNode.distance === Infinity) return visitedNodes;\n        // mark as visited\n        closestNode.isVisited = true;\n        visitedNodes.push(closestNode);\n        if(closestNode === finishNode) return visitedNodes;\n        // update distances + 1\n        updateUnvisistedNodes(closestNode, grid);\n    }\n}\n// sort array of nodes by distance to origin\nfunction sortNodesByDistance(unvisistedNodes) {\n    unvisistedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n// update nodes\nfunction updateUnvisistedNodes(node, grid) {\n    const unvisitedNodes = getUnvisitedNeighbors(node, grid);\n    for(const neighbor of unvisitedNodes) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n// update neighbor nodes\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if(row > 0) neighbors.push(grid[row-1][col]);\n    if(row < grid.length - 1) neighbors.push(grid[row+1][col]);\n    if(col > 0) neighbors.push(grid[row][col-1]);\n    if(col < grid[0].length - 1) neighbors.push(grid[row][col+1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n// iterate grid\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for(const row of grid) {\n        for(const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n// backtrack from final node\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPath = [];\n    let currentNode = finishNode;\n    while(currentNode != null) {\n        nodesInShortestPath.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPath;\n}\n\n\n\n\n\n\n\n\n\n\n","export function bfs(grid, startNode, finishNode) {\n    const unvisitedNodes = getAllNodes(grid);\n    const visitedNodes = [];\n    while(unvisitedNodes.length !== 0) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        if(closestNode.isWall) continue;\n        if(closestNode.distance === Infinity) return visitedNodes;\n        closestNode.isVisited = true;\n        visitedNodes.push(closestNode);\n        if(closestNode === finishNode) return visitedNodes;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisistedNodes) {\n    unvisistedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisistedNodes = getNeighbors(node, grid);\n    for(const neighbor of unvisistedNodes) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if(row > 0) neighbors.push(grid[row-1][col]);\n    if(row < grid.length - 1) neighbors.push(grid[row+1][col]);\n    if(col > 0) neighbors.push(grid[row][col-1]);\n    if(col < grid[0].length - 1) neighbors.push(grid[row][col+1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for(const row of grid) {\n        for(const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\n// This React component is the pop-up dialog to explain \n// how to use the dashboard\n\nexport default function HelpDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const useStyles = makeStyles({\n    button1: {\n        margin: '20px',\n        backgroundColor: 'brown',\n        fontWeight: 'bold'\n    },\n  })\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <Button className={classes.button1} onClick={handleClickOpen}>\n        HOW IT WORKS\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"How does it work?\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            The purpose of this dashboard is to proof the efficiency of searching algorithms.\n          </DialogContentText>\n          <DialogContentText id=\"alert-dialog-description\">\n            1. Select an initial and target position (green and red squares) by moving them to any place in the grid.\n          </DialogContentText>\n          <DialogContentText id=\"alert-dialog-description\">\n            2. Draw as many walls as you want (obstacles), by clicking and moving the mouse over the white squares.\n          </DialogContentText>\n          <DialogContentText id=\"alert-dialog-description\">\n            3. Press visualize and see the efficiency of the chosen algorithm.\n          </DialogContentText>\n          <DialogContentText id=\"alert-dialog-description\">\n            4. Clear the grid and restart the game!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            I AM READY!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\n\n// This React component is the pop-up dialog to explain \n// how to use the dashboard\n\nexport default function AlgorithmSelector(props) {\n  const [open, setOpen] = React.useState(false);\n  const algorithms = ['Dijkstra', 'BFS (Breadth-first search)'];\n\n  const { changeAlgorithm, currentAlgorithm } = props;\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const useStyles = makeStyles({\n    button1: {\n        margin: '20px',\n        backgroundColor: 'red',\n        fontWeight: 'bold'\n    },\n    button2: {\n      margin: '10px',\n      backgroundColor: 'purple',\n      color: 'white',\n      fontWeight: 'bold'\n  },\n  })\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <Button className={classes.button1} onClick={handleClickOpen}>\n        {currentAlgorithm}\n        <ArrowDropDownIcon></ArrowDropDownIcon>\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"What searching Algorithm do you want to use?\"}</DialogTitle>\n        <DialogContent>\n          {\n            algorithms.map((algorithmName, index) => {\n              return <Button key={index} className={classes.button2} onClick={() => {\n                changeAlgorithm(algorithmName);\n                handleClose();\n              }}>{algorithmName}</Button>\n            })\n          }\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport Node from './Node';\nimport './PathfindingVisualizer.css';\nimport NavigationBar from './NavigationBar';\nimport {\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\nimport {bfs} from '../Algorithms/Bfs';\nimport HelpDialog from './HelpDialog';\nimport AlgorithmSelector from './AlgorithmSelector';\n\nconst useStyles = makeStyles({\n    button1: {\n        margin: '20px',\n        backgroundColor: 'red',\n        fontWeight: 'bold'\n    },\n    button2: {\n        margin: '20px',\n        backgroundColor: 'green',\n        fontWeight: 'bold'\n    },\n    button3: {\n        margin: '20px',\n        backgroundColor: 'purple',\n        fontWeight: 'bold'\n    },\n    button4: {\n        margin: '20px',\n        backgroundColor: 'yellow',\n        fontWeight: 'bold'\n    },\n    button5: {\n        margin: '20px',\n        backgroundColor: 'brown',\n        fontWeight: 'bold'\n    },\n})\n\nexport default function PathfindingVisualizer(){\n\n    const classes = useStyles();\n\n    // board characteristics\n    const BOARD_WIDTH = 55;\n    const BOARD_LENGTH= 23;\n    const INITIAL_POS_x = 7;\n    const INITIAL_POS_y = 8;\n    const FINAL_POS_x = 9;\n    const FINAL_POS_y = 36;\n\n    const [algorithm, setAlgorithm] = useState('Dijkstra');\n\n    //grid is a 2D array [][]\n    const [grid, setGrid] = useState([]);\n    //variable to control if mouse is pressed (add walls or move initial points)\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n    //when mouse scrolls over\n    const handleMouseEnter = (row, col) => {\n        if(!mouseIsPressed) return;\n        const newGrid = addOrDeleteWall(grid, row, col);\n        setGrid(newGrid);             \n    }\n    //when mouse presses a \"node\" aka <div>\n    const handleMouseDown = (row, col) => {\n        setMouseIsPressed(true);\n        const newGrid = addOrDeleteWall(grid, row, col);\n        setGrid(newGrid);            \n    }\n    //when mouse is unpressed\n    const handleMouseUp = (row, col) => {\n        setMouseIsPressed(false);\n    }\n    //visual animation for computing Dijkstra's algorithm\n    const animatedVisualization = (visitedNodes, shortestPath) => {\n        for(let i = 1; i <= visitedNodes.length; i++) {\n            if ( i === visitedNodes.length) {\n                setTimeout(() => {\n                    showPath(shortestPath);\n                }, i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodes[i];\n                if(node.col !== FINAL_POS_y || node.row !== FINAL_POS_x) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-is-visited';   \n                }\n            }, i)\n        }\n    }\n    //compute actual dijkstra algorithm\n    const computeDijkstra = () => {\n        const visitedNodes = dijkstra(grid, grid[INITIAL_POS_x][INITIAL_POS_y], grid[FINAL_POS_x][FINAL_POS_y]);\n        const shortestPath = getNodesInShortestPathOrder(grid[FINAL_POS_x][FINAL_POS_y]);\n        animatedVisualization(visitedNodes, shortestPath);\n    }\n\n    const computeBfs = () => {\n        const visitedNodes = bfs(grid, grid[INITIAL_POS_x][INITIAL_POS_y], grid[FINAL_POS_x][FINAL_POS_y]);\n        const shortestPath = getNodesInShortestPathOrder(grid[FINAL_POS_x][FINAL_POS_y]);\n        animatedVisualization(visitedNodes, shortestPath);\n    }\n\n    const visualizeAlgorithm = () => {\n        if(algorithm === 'Dijkstra') {\n            computeDijkstra();\n        } else if(algorithm === 'BFS (Breadth-first search)') {\n            computeBfs();\n        } else {\n            alert('Not implemented yet');\n        }\n    }\n\n    const changeAlgorithm = (algorithm) => {\n        setAlgorithm(algorithm);\n    }\n\n    //show shortest path\n    const showPath = (nodes) => {\n        if(nodes.length === 1) {\n            alert('No path')\n            return;\n        }\n        for(let i = 0; i < nodes.length; i++) {\n            if( nodeIsInitialOrLast(nodes[i].row, nodes[i].col) ) continue;\n            setTimeout(function() {\n                document.getElementById(`node-${nodes[i].row}-${nodes[i].col}`).className = 'node node-is-path';\n            }, 10);\n        }\n    }\n    //Helper method to detect if node is initial or last\n    const nodeIsInitialOrLast = (row, col) => {\n        if( (row === INITIAL_POS_x && col === INITIAL_POS_y) \n        || (row === FINAL_POS_x && col === FINAL_POS_y)) {\n            return true;\n        }\n        return false;\n    }\n    //clear grid (board)\n    const clearGrid = () => {\n        setGrid(createEmptyGrid());\n        for( let row = 0; row < BOARD_LENGTH; row++) {\n            for( let col = 0; col < BOARD_WIDTH; col++) {\n                if(nodeIsInitialOrLast(row, col)) continue;\n                document.getElementById(`node-${row}-${col}`).className = 'node'; \n            }\n        }\n    }\n    //initialize grid\n    const createEmptyGrid = () => {\n        let grid = [];\n        for( let row = 0; row < BOARD_LENGTH; row++) {\n            const currentRow = [];\n            for( let col = 0; col < BOARD_WIDTH; col++) {\n                let currentNode = {\n                    row,\n                    col,\n                    isStart: row === INITIAL_POS_x && col === INITIAL_POS_y,\n                    isFinish: row === FINAL_POS_x && col === FINAL_POS_y,\n                    isWall: false,\n                    isVisited: false,\n                    distance: (row === INITIAL_POS_x && col === INITIAL_POS_y) ? 0 : Infinity,\n                    previousNode: null\n                }\n                currentRow.push(currentNode);\n            }\n            grid.push(currentRow);\n        }\n        return grid;       \n    }\n    //method to add or delete walls when clicking the grid\n    const addOrDeleteWall = (grid, row, col) => {\n        const newGrid = grid.slice();\n        const node = newGrid[row][col];\n        const newNode = {\n            ...node,\n            isWall: !node.isWall,\n        };\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n    \n\n    useEffect(() => {\n        setGrid(createEmptyGrid());\n    }, []);\n\n    return(\n        <>\n        <NavigationBar></NavigationBar>\n        <div className=\"buttons-container\">\n            <AlgorithmSelector\n                changeAlgorithm={changeAlgorithm}\n                currentAlgorithm={algorithm}\n            ></AlgorithmSelector>\n            <Button variant=\"contained\" className={classes.button2} onClick={() => visualizeAlgorithm()}>VISUALIZE</Button>\n            <Button variant=\"contained\" className={classes.button4} onClick={() => clearGrid()}>CLEAR GRID</Button>\n            <HelpDialog></HelpDialog>\n        </div>\n        <div className=\"grid\">\n            {grid.map((row, rowIndex) => {\n                return(\n                    <div key={rowIndex}>\n                        {row.map((node, nodeIndex) => {\n                            const {row, col, isStart, isFinish, isWall} = node;\n                            return(\n                                <Node\n                                    row={row}\n                                    col={col}\n                                    key={nodeIndex}\n                                    isStart={isStart}\n                                    isFinish={isFinish}\n                                    isWall={isWall}\n                                    onMouseDown={(row, col) => handleMouseDown(row, col)}\n                                    onMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                                    onMouseUp={(row, col) => handleMouseUp(row, col)}\n                                ></Node>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n        </>\n    );\n}\n","import PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <PathfindingVisualizer></PathfindingVisualizer>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}